#!/usr/bin/env bash

function logD() {
  echo -e "$(date +"%F %T") [DEBUG][${SCRIPT_NAME}:$2] - $1"
}

function logI() {
  echo -e "$(date +"%F %T") [INFO][${SCRIPT_NAME}:$2]  - $1"
}

function logW() {
  echo -e "$(date +"%F %T") [WARN][${SCRIPT_NAME}:$2]  - $1"
}

function logE() {
  echo -e "$(date +"%F %T") [ERROR][${SCRIPT_NAME}:$2] - $1"
}

function cd_func() {
  local x2 the_new_dir adir index
  local -i cnt

  if [[ $1 ==  "--" ]]; then
    dirs -v
    return 0
  fi

 the_new_dir=$1
  [[ -z $1 ]] && the_new_dir=$HOME

  if [[ ${the_new_dir:0:1} == '-' ]]; then

     # Extract dir N from dirs
     index=${the_new_dir:1}
     [[ -z $index ]] && index=1
     adir=$(dirs +$index)
     [[ -z $adir ]] && return 1
     the_new_dir=$adir
   fi
 
   #
   # '~' has to be substituted by ${HOME}
   [[ ${the_new_dir:0:1} == '~' ]] && the_new_dir="${HOME}${the_new_dir:1}"
 
   #
   # Now change to the new dir and add to the top of the stack
   pushd "${the_new_dir}" > /dev/null
   [[ $? -ne 0 ]] && return 1
   the_new_dir=$(pwd)
 
   #
   # Trim down everything beyond 11th entry
   popd -n +11 2>/dev/null 1>/dev/null
 
   #
   # Remove any other occurence of this dir, skipping the top of the stack
   for ((cnt=1; cnt <= 10; cnt++)); do
     x2=$(dirs +${cnt} 2>/dev/null)
     [[ $? -ne 0 ]] && return 0
     [[ ${x2:0:1} == '~' ]] && x2="${HOME}${x2:1}"
     if [[ "${x2}" == "${the_new_dir}" ]]; then
       popd -n +$cnt 2>/dev/null 1>/dev/null
       cnt=cnt-1
     fi
   done
 
   return 0
}

function iterm () {
    local cmd=""
    local wd="$PWD"
    local args="$@"

    if [ -d "$1" ]; then
        wd="$1"
        args="${@:2}"
    fi

    if [ -n "$args" ]; then
        # echo $args
        cmd="$args"
    fi

   # osascript &>/dev/null <<EOF
    osascript <<EOF
tell application "iTerm"
  activate
  set new_window to (create window with default profile)
  set cSession to current session of new_window
  tell new_window
    tell cSession
      delay 1
      write text "cd $wd;$cmd"
      delay 2
      repeat
        delay 0.1
        --          display dialog cSession is at shell prompt
        set isdone to is at shell prompt
        if isdone then exit repeat
      end repeat
    end tell
  end tell
end tell
EOF
}


function tab () {
  local cmd=""
  local cdto="$PWD"
  local args="$@"

  if [ -d "$1" ]; then
      cdto=`cd "$1"; pwd`
      args="${@:2}"
  fi

  if [ -n "$args" ]; then
      cmd="; $args"
  fi

  osascript &>/dev/null <<EOF
      tell application "iTerm"
          tell current terminal
              launch session "Default Session"
              tell the last session
                  write text "cd \"$cdto\"$cmd"
              end tell
          end tell
      end tell
EOF
}